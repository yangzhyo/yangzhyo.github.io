<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>乐高入坑之 LEGO 21303 瓦力摩托化改装</title>
      <link href="/2019/01/06/lego-21303-wall-e/"/>
      <url>/2019/01/06/lego-21303-wall-e/</url>
      <content type="html"><![CDATA[<blockquote><p>一入乐高深似海，从此金钱是路人。在以前的概念中，这不过是小孩子把玩的玩具，没啥乐趣和挑战。然而乐高的世界琳琅满目，气象万千。初级玩家可以在拼装过程中享受到难得的宁静和专注，感受从零到整的工程师既视感。中级玩家可以通过一系列改装升级，找到一种赋予物体以生机的成就感。高级玩家在创意的海洋中，自由创造各种令人赞叹的作品，小到缩小版的汽车零部件（发动机、变速箱、差速器……），大到可以开上马路的等比例布加迪跑车，还有经典的机械式数字计算机、织布机、不可思议的仿生机械臂……</p></blockquote><a id="more"></a><h1 id="乐高扫盲"><a href="#乐高扫盲" class="headerlink" title="乐高扫盲"></a>乐高扫盲</h1><p>先推荐两篇入门扫盲贴</p><ul><li><a href="http://capbone.com/lego-instruction-1/" target="_blank" rel="noopener">乐高入门指南</a></li><li><a href="https://www.jianshu.com/p/3294efaa2dd2" target="_blank" rel="noopener">乐高深度扫盲-观念篇</a></li></ul><p>两位作者都是资深玩家，分享了很多专业的高质量乐高科普文章，大家可以翻阅。</p><p>如今，在国内外有很大规模的乐高玩家和社区，一些经典的绝版产品甚至被炒高价格达数十倍，参考这篇：<a href="https://kknews.cc/news/x5nzzyq.html" target="_blank" rel="noopener">黄金都不好使了，如今最值钱的是乐高！</a>。还有一些 MOC (My Own Creation) 作品，如果作者有意出售成品或图纸，也能收获颇丰。</p><h1 id="LEGO-21303-Wall-E"><a href="#LEGO-21303-Wall-E" class="headerlink" title="LEGO 21303 Wall-E"></a>LEGO 21303 Wall-E</h1><p><a href="https://shop.lego.com/en-HU/product/WALL-E-21303" target="_blank" rel="noopener">LEGO 21303 Wall-E</a> 是 <a href="https://shop.lego.com/en-US/category/ideas" target="_blank" rel="noopener">LEGO Ideas</a> 系列产品，Ideas 的产品都是来自于玩家的自由创意，经过社区投票角逐而由官方产品化。瓦力 (Wall-E )是皮克斯经典动画电影 <a href="https://movie.douban.com/subject/2131459/" target="_blank" rel="noopener">机器人总动员</a> 中的男主角，一个任劳任怨的垃圾整理机器人，喜欢搜集各种宝贝，有一位小强朋友，为女神 Eva 坠入爱河。</p><p>从官网产品页得知，21303 Wall-E 已经绝版，线下专卖店更是不可能买到，好在有万能的某宝和上一节提到的“收藏家”，让我如愿以偿买到了这台绝版瓦力。</p><p>▼ 开箱前照<br><img src="https://i.imgur.com/0bTad4p.png" alt="开箱前照"></p><p>箱内是乐高零件（676片）、工具，以及一本说明书。需要注意的是，官方出品的第一代 Wall-E 产品脖子有设计缺陷，会导致头部失重变成歪脖子瓦力，不过后来出了官方补丁，修复了这一问题。大家在购买时请注意问清版本。</p><p>拼装过程不难，参照说明书，几个小时既可完成。乐高官网也提供了 <a href="https://www.lego.com/en-us/service/buildinginstructions/search?initialsearch=21303#?text=21303" target="_blank" rel="noopener">拼装手册</a>。</p><p>▼ 下面这个视频是油管上的热心玩家讲解脖子缺陷的形成原因，以及修复补丁的工作原理（油管视频，需科学上网观看）<br><a href="https://www.youtube.com/watch?v=8pGMsBI2y-w" target="_blank" rel="noopener">LEGO Wall-E official neck fix in action</a></p><p>▼ 献上一张成品照片，这可怜兮兮的眼神，生怕别人抢走了他的绿植，很有灵气。<br><img src="https://i.imgur.com/bOEArRx.jpg" alt="成品1"></p><h1 id="摩托化-Motorize"><a href="#摩托化-Motorize" class="headerlink" title="摩托化 (Motorize)"></a>摩托化 (Motorize)</h1><p>下一步是让瓦力动起来，注入活力。LEGO 专门提供了一套动力化组件 <a href="https://www.lego.com/en-us/themes/power-functions" target="_blank" rel="noopener">PF (Power Function)</a>，包含了一系列零件，如电源盒、马达、红外接收器、红外遥控器等。瓦力的摩托化很早就在社区中成熟地实践了，并有卖家将其形成套装包在网上售卖，在某宝上可以很容易买到，很省心。</p><p>▼ 如下是需要用到的部件（电源盒 x 1，M号马达 x 2，红外接收器 x 1，红外遥控器 x1，零件若干）<br><img src="https://i.imgur.com/RZsqgOz.png" alt="动力包零件"></p><p>改装过程在网上有很多可供参考的视频，在这里提供两个，我作了参考，但并未完全参照，加入了自己的创意，这里不作赘述。大家可以自由发挥，这就是乐高的乐趣，充分发挥自己的想象力和创造性。</p><ul><li><a href="https://www.youtube.com/watch?v=k0q53_HuAAg" target="_blank" rel="noopener">HOW TO Motorize Lego Ideas Wall-E #21303 DIY</a></li><li><a href="https://www.youtube.com/watch?v=32ybYylVVGs" target="_blank" rel="noopener">MOC – LEGO Wall-E RC Motorized Speed Build (instruction)</a></li></ul><p>▼ 下面是我的动力版瓦力，正值 嫦娥4-玉免2 登月，于是以瓦力拍了一个模拟视频向中国航天致敬。</p><iframe src="http://player.youku.com/embed/XNDAwMDA3NTU1Ng==" frameborder="0" allowfullscreen></iframe><h1 id="声音与灯效"><a href="#声音与灯效" class="headerlink" title="声音与灯效"></a>声音与灯效</h1><p>如果说精致的外观让瓦力充满灵气，动力化的瓦力活力十足，那么加入声音和灯效的瓦力则是被注入了灵魂。当我在油管上看到这段视频后，直呼太惊艳！一定要获得这套装备。</p><p>▼ PFx Brick Demo - LEGO Wall-E 21303</p><iframe width="560" height="315" src="https://www.youtube.com/embed/ObuUqKaxrWs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>根据视频的描述，是一家叫 <a href="https://fxbricks.com" target="_blank" rel="noopener">Fx Bricks</a> 的公司提供的零件，根据对视频和产品的研究，理清了我所需要的零件：</p><ul><li><a href="https://www.fxbricks.com/store/index.php?product/page/3202/PFx+Brick+IR+4+MB" target="_blank" rel="noopener">PFx Brick IR 4 MB</a>, 红外接收器，提供一个电源接口，两个马达接口，一个扬声器接口，一个 LED 灯模组接口，接口兼容 LEGO PF, 4 MB 音频存储空间。</li><li><a href="https://www.fxbricks.com/store/index.php?product/page/3197/M+Speaker+Brick" target="_blank" rel="noopener">M Speaker Brick</a>，扬声器。</li><li><a href="https://www.fxbricks.com/store/index.php?product/page/3266/Fx+LED+Red+%28128+mm%29" target="_blank" rel="noopener">Fx LED Red (128 mm)</a>，红色 LED 灯 x 1。</li><li><a href="https://www.fxbricks.com/store/index.php?product/page/3258/Fx+LED+White+%28128+mm%29" target="_blank" rel="noopener">Fx LED White (128 mm)</a>，白色 LED 灯 x 2。</li><li><a href="https://www.fxbricks.com/store/index.php?product/page/3181/pinLABduo" target="_blank" rel="noopener">pinLABduo</a>，LED 灯控模组，最多可接入 16 个 LED 灯。</li></ul><p>改装过程，</p><ol><li>用 PFx Brick IR 4 MB 替换掉原装的 LEGO PF IR Receiver</li><li>接上 M Speaker Brick 到 PFx Brick IR 4 MB</li><li>接上 pinLABduo 到 PFx Brick IR 4 MB</li><li>接上 Fx LED Red (128 mm) 和 Fx LED White (128 mm) x 2 到 pinLABduo</li><li>用 Fx Bricks 提供的 <a href="https://fxbricks.com/resources/page/" target="_blank" rel="noopener">App</a> 进行配置，官方提供了预配置好的配置文件 <a href="https://fxbricks.com/resources/profiles/" target="_blank" rel="noopener">21303 Wall-E Pre-Configured Profile</a></li></ol><p>安装过程可参考以下两个视频：</p><ul><li><a href="https://www.youtube.com/watch?v=AUx1WW2Q-g4" target="_blank" rel="noopener">Test: PFx Brick, a lights &amp; sound controller for your LEGO creations</a></li><li><a href="https://www.youtube.com/watch?v=ObuUqKaxrWs" target="_blank" rel="noopener">PFx Brick Demo - LEGO Wall-E 21303</a></li></ul>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LEGO </tag>
            
            <tag> 乐高 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Instagram 僵尸清理记</title>
      <link href="/2018/12/31/clear-instagram-relationship/"/>
      <url>/2018/12/31/clear-instagram-relationship/</url>
      <content type="html"><![CDATA[<blockquote><p>Instagram 被老毛子盗窃了，邮箱都被篡改了，好在最终找回了帐号。登录帐号发现，多了几百个粉丝（Followers），两千多个关注（Followings），更要命的是，Instagram 并没有提供批量移除的功能，总不可能人肉一个个干，万幸的是程序员不怕折腾。<br>Tags: 批量移除 Instagram 内容、关注、粉丝，Remove Instagram media, followers, followings.</p></blockquote><a id="more"></a><h1 id="Instagram-API-Platform"><a href="#Instagram-API-Platform" class="headerlink" title="Instagram API Platform"></a>Instagram API Platform</h1><p>第一个能想到的办法是看看 <a href="https://www.instagram.com/developer/" target="_blank" rel="noopener">Instagram Open API</a>，但官宣老版的 API Platform 已经关闭了，全部迁移到 <a href="https://developers.facebook.com/docs/graph-api?locale=zh_CN" target="_blank" rel="noopener">Facebook 图谱 API</a> 的子项目 <a href="https://developers.facebook.com/products/instagram/" target="_blank" rel="noopener">Instagram Graph API</a></p><p><img src="https://i.imgur.com/FTASMl6.png" alt="https://i.imgur.com/FTASMl6.png"></p><h1 id="Instagram-Graph-API"><a href="#Instagram-Graph-API" class="headerlink" title="Instagram Graph API"></a>Instagram Graph API</h1><blockquote><p>图谱 API 是读取和写入 Facebook 社交关系图谱的主要途径。我们所有的 SDK 和产品都能以某种方式与图谱 API 互动，我们其他的 API 都是图谱 API 的扩展，因此了解图谱 API 的工作方式至关重要。</p></blockquote><p>图谱 API 得名于“社交关系图谱”理念 — Facebook 上的一种信息表示形式。它由以下部分组成：</p><ul><li>节点 — 用户、照片、主页或评论等基本的个体对象</li><li>连线 — 对象集合与单个对象之间的联系，如主页上的照片或照片的评论</li><li>字段 — 关于对象的数据，如用户的生日或主页的名称</li></ul><p>更多关于图谱 API 的概念和架构，可参考 <a href="https://developers.facebook.com/docs/graph-api/overview/" target="_blank" rel="noopener">https://developers.facebook.com/docs/graph-api/overview/</a></p><p>再来看看 Instagram Graph API 的文档 <a href="https://developers.facebook.com/docs/instagram-api" target="_blank" rel="noopener">https://developers.facebook.com/docs/instagram-api</a></p><p><img src="https://i.imgur.com/4O2ou8B.png" alt="https://i.imgur.com/4O2ou8B.png"></p><p>大致浏览了目前已开放的接口，并未找到 Relationship 相关的接口！用不了。</p><h1 id="Instagram-SDK"><a href="#Instagram-SDK" class="headerlink" title="Instagram SDK"></a>Instagram SDK</h1><p>Github 上有 Instagram 官方提供的 SDK，见：<a href="https://github.com/facebookarchive/python-instagram" target="_blank" rel="noopener">https://github.com/facebookarchive/python-instagram</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-instagram</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> instagram.client <span class="keyword">import</span> InstagramAPI</span><br><span class="line"></span><br><span class="line">access_token = <span class="string">"XXXXXXXX"</span></span><br><span class="line">client_secret = <span class="string">"XXXXXXXX"</span></span><br><span class="line">api = InstagramAPI(access_token=access_token, client_secret=client_secret)</span><br><span class="line">follows, next_ = api.user_follows()</span><br></pre></td></tr></table></figure><p>如何获取 access token 请参考文档 <a href="https://www.instagram.com/developer/authentication/" target="_blank" rel="noopener">https://www.instagram.com/developer/authentication/</a></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"./in.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    follows, next_ = api.user_follows()</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/instagram/bind.py"</span>, line <span class="number">197</span>, <span class="keyword">in</span> _call</span><br><span class="line">    <span class="keyword">return</span> method.execute()</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/instagram/bind.py"</span>, line <span class="number">189</span>, <span class="keyword">in</span> execute</span><br><span class="line">    content, next = self._do_api_request(url, method, body, headers)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/instagram/bind.py"</span>, line <span class="number">163</span>, <span class="keyword">in</span> _do_api_request</span><br><span class="line">    <span class="keyword">raise</span> InstagramAPIError(status_code, content_obj[<span class="string">'meta'</span>][<span class="string">'error_type'</span>], content_obj[<span class="string">'meta'</span>][<span class="string">'error_message'</span>])</span><br><span class="line">instagram.bind.InstagramAPIError: (<span class="number">400</span>) APINotAllowedError-This endpoint has been retired</span><br></pre></td></tr></table></figure><p>这套 SDK 背后就是 Instagram API Platform，证实其确实已经关闭！不能用。</p><h1 id="Instagram-Private-API"><a href="#Instagram-Private-API" class="headerlink" title="Instagram Private API"></a>Instagram Private API</h1><p>API Platform 关闭以后，有网友通过逆向工程研究公开了 Instagram Private API, 并提供了 SDK, 列举几个 Github Repo</p><ul><li><a href="https://github.com/mgp25/Instagram-API" target="_blank" rel="noopener">https://github.com/mgp25/Instagram-API</a></li><li><a href="https://github.com/LevPasha/Instagram-API-python" target="_blank" rel="noopener">https://github.com/LevPasha/Instagram-API-python</a></li><li><a href="https://github.com/dilame/instagram-private-api" target="_blank" rel="noopener">https://github.com/dilame/instagram-private-api</a></li></ul><p>mgp25 的 PHP 的 SDK 亲测可用！我将代码放在了 Github 上。<br><a href="https://github.com/yangzhyo/clear-instagram" target="_blank" rel="noopener">https://github.com/yangzhyo/clear-instagram</a></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> mgp25/instagram-php</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">$ig = <span class="keyword">new</span> \InstagramAPI\Instagram();</span><br><span class="line">$ig-&gt;setProxy(<span class="string">'socks5://127.0.0.1:1086'</span>); <span class="comment">// 这个代理设置，你懂的</span></span><br><span class="line">$ig-&gt;login(<span class="string">'test'</span>,<span class="string">'test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除关注</span></span><br><span class="line">$followings = $ig-&gt;people-&gt;getSelfFollowing(<span class="string">'123e4567-e89b-12d3-a456-426655440000'</span>);</span><br><span class="line">print_r(<span class="string">'Totally '</span>.count($followings-&gt;getUsers()).<span class="string">" followings\n"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($followings-&gt;getUsers() <span class="keyword">as</span> $user) &#123;</span><br><span class="line">    print_r(<span class="string">'Remove '</span>.$user-&gt;getPk().<span class="string">"\n"</span>);</span><br><span class="line">    $ig-&gt;people-&gt;unfollow($user-&gt;getPk());</span><br><span class="line">    sleep(<span class="number">5</span>); <span class="comment">// 防止触发频控策略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除粉丝</span></span><br><span class="line">$followers = $ig-&gt;people-&gt;getSelfFollowers(<span class="string">'123e4567-e89b-12d3-a456-426655440000'</span>);</span><br><span class="line">print_r(<span class="string">'Totally '</span>.count($followers-&gt;getUsers()).<span class="string">" followers\n"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($followers-&gt;getUsers() <span class="keyword">as</span> $user) &#123;</span><br><span class="line">    print_r(<span class="string">'Remove '</span>.$user-&gt;getPk().<span class="string">"\n"</span>);</span><br><span class="line">    $ig-&gt;people-&gt;removeFollower($user-&gt;getPk());</span><br><span class="line">    sleep(<span class="number">5</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除媒体</span></span><br><span class="line">$userFeeds = $ig-&gt;timeline-&gt;getSelfUserFeed();</span><br><span class="line">print_r(<span class="string">'Totally '</span>.count($userFeeds-&gt;getItems()).<span class="string">" media\n"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($userFeeds-&gt;getItems() <span class="keyword">as</span> $item) &#123;</span><br><span class="line">    print_r(<span class="string">'Delete '</span>.$item-&gt;getPk().<span class="string">"\n"</span>);</span><br><span class="line">    $ig-&gt;media-&gt;delete($item-&gt;getPk());</span><br><span class="line">    sleep(<span class="number">5</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除点赞。俄罗斯人用我的帐号给大量的俄罗斯帐号点了赞，现在系统给我推荐的好友大多是俄罗斯人，[摊手]。</span></span><br><span class="line">$maxId = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    $likedFeeds = $ig-&gt;media-&gt;getLikedFeed();</span><br><span class="line">    print_r(<span class="string">'Retrieved '</span>.count($likedFeeds-&gt;getItems()).<span class="string">" liked media\n"</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($likedFeeds-&gt;getItems() <span class="keyword">as</span> $item) &#123;</span><br><span class="line">        print_r(<span class="string">'Unlike '</span>.$item-&gt;getPk().<span class="string">"\n"</span>);</span><br><span class="line">        $ig-&gt;media-&gt;unlike($item-&gt;getPk());</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $maxId = $likedFeeds-&gt;getNextMaxId();</span><br><span class="line">&#125; <span class="keyword">while</span> ($maxId !== <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p>运行成功，虽然操作之间加入了等待，但还是有可能触发频控，只需要等待重试即可。</p>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Instagram </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你的单例模式实现正确吗？</title>
      <link href="/2018/11/21/double-checked-locking/"/>
      <url>/2018/11/21/double-checked-locking/</url>
      <content type="html"><![CDATA[<blockquote><p>单例模式是大家在日常开发过程中最常用的设计模式之一，其最常见的一种实现如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Multithreaded version</span></span><br><span class="line"><span class="comment">// "Double-Checked Locking" idiom</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (helper == <span class="keyword">null</span>) </span><br><span class="line">      <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (helper == <span class="keyword">null</span>) </span><br><span class="line">          helper = <span class="keyword">new</span> Helper();</span><br><span class="line">      &#125;    </span><br><span class="line">    <span class="keyword">return</span> helper;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// other functions and members...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">双重检查锁定模式（Double-Checked Locking）</a>，懒加载，支持多线程并发，性能优异。看起来很完美，但很不幸，这里暗藏巨坑。</p><a id="more"></a><h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h1><p>先来看一段 JIT 编译出来的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">singletons[i].reference = <span class="keyword">new</span> Singleton();</span><br></pre></td></tr></table></figure><p>编译成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0206106A   mov         eax,0F97E78h</span><br><span class="line">0206106F   call        01F6B210                  ; allocate space for</span><br><span class="line">                                                 ; Singleton, return result in eax</span><br><span class="line">02061074   mov         dword ptr [ebp],eax       ; EBP is &amp;singletons[i].reference </span><br><span class="line">                                                ; store the unconstructed object here.</span><br><span class="line">02061077   mov         ecx,dword ptr [eax]       ; dereference the handle to</span><br><span class="line">                                                 ; get the raw pointer</span><br><span class="line">02061079   mov         dword ptr [ecx],100h      ; Next 4 lines are</span><br><span class="line">0206107F   mov         dword ptr [ecx+4],200h    ; Singleton&apos;s inlined constructor</span><br><span class="line">02061086   mov         dword ptr [ecx+8],400h</span><br><span class="line">0206108D   mov         dword ptr [ecx+0Ch],0F84030h</span><br></pre></td></tr></table></figure><p>可以看到，对 singletons[i].reference 引用的赋值要早于 Singleton 的构造器调用。这在 Java 现有的内存模型下是完全合法的。C,C++ 亦是如此。</p><p><strong>导致的后果是什么？</strong></p><p>后进来的线程检查到 Helper 引用不为 NULL，直接返回了并未完成初始化的实例对象，其在后续使用过程中，极有可能发生崩溃。</p><p><strong>为什么会这样？</strong></p><p>原因是为了优化性能，编译器可以自由地重排变量的初始化和访问顺序。</p><p>更多细节可以参考</p><ul><li><a href="http://gee.cs.oswego.edu/dl/cpj/jmm.html" target="_blank" rel="noopener">more detailed description of compiler-based reorderings</a></li><li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/" target="_blank" rel="noopener">The Java Memory Model</a></li></ul><h1 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h1><p>在多 CPU (Multi-Processor) 架构上，如果两个线程运行在不同的处理器上，每个线程针对共享变量，可以在 CPU 高速缓存中拥有自己的 Local Cache, 线程对变量值的更新不一定会实时反映到主存中，导致其他线程对变量的访问出现不一致。</p><p>如下图所示：<br><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/volatile-keyword-in-java.png" alt="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/volatile-keyword-in-java.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="静态-Singleton"><a href="#静态-Singleton" class="headerlink" title="静态 Singleton"></a>静态 Singleton</h2><p>类的加载机制可以确保 singleton 的正确初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelperSingleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Helper singleton = <span class="keyword">new</span> Helper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-位基元类型-Singleton"><a href="#32-位基元类型-Singleton" class="headerlink" title="32 位基元类型 Singleton"></a>32 位基元类型 Singleton</h2><p>32 位基元类型（如 int, float 等）的读写是原子的，特别注意的是 64 位不是原子的（如 double, long 等），详见 <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Correct Double-Checked Locking for 32-bit primitives</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> cachedHashCode = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = cachedHashCode;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span>) </span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">// 如果 computeHashCode() 没有副作用，不需要同步块</span></span><br><span class="line">      <span class="keyword">if</span> (cachedHashCode != <span class="number">0</span>) <span class="keyword">return</span> cachedHashCode;</span><br><span class="line">      h = computeHashCode();</span><br><span class="line">      cachedHashCode = h;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// other functions and members...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显式使用内存屏障"><a href="#显式使用内存屏障" class="headerlink" title="显式使用内存屏障"></a>显式使用内存屏障</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C" target="_blank" rel="noopener">内存屏障（Memory barrier）</a>，也称内存栅栏，内存栅障，屏障指令等，是一类同步屏障指令，是 CPU 或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ implementation with explicit memory barriers</span></span><br><span class="line"><span class="comment">// Should work on any platform, including DEC Alphas</span></span><br><span class="line"><span class="comment">// From "Patterns for Concurrent and Distributed Objects",</span></span><br><span class="line"><span class="comment">// by Doug Schmidt</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TYPE</span>, <span class="title">class</span> <span class="title">LOCK</span>&gt; <span class="title">TYPE</span> *</span></span><br><span class="line"><span class="class"><span class="title">Singleton</span>&lt;TYPE, LOCK&gt;:</span>:instance (<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="comment">// First check</span></span><br><span class="line">    TYPE* tmp = instance_;</span><br><span class="line">    <span class="comment">// Insert the CPU-specific memory barrier instruction</span></span><br><span class="line">    <span class="comment">// to synchronize the cache lines on multi-processor.</span></span><br><span class="line">    <span class="keyword">asm</span> (<span class="string">"memoryBarrier"</span>);</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Ensure serialization (guard</span></span><br><span class="line">        <span class="comment">// constructor acquires lock_).</span></span><br><span class="line">        Guard&lt;LOCK&gt; guard (lock_);</span><br><span class="line">        <span class="comment">// Double check.</span></span><br><span class="line">        tmp = instance_;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = <span class="keyword">new</span> TYPE;</span><br><span class="line">                <span class="comment">// Insert the CPU-specific memory barrier instruction</span></span><br><span class="line">                <span class="comment">// to synchronize the cache lines on multi-processor.</span></span><br><span class="line">                <span class="keyword">asm</span> (<span class="string">"memoryBarrier"</span>);</span><br><span class="line">                instance_ = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Thread-Local-Storage"><a href="#使用-Thread-Local-Storage" class="headerlink" title="使用 Thread Local Storage"></a>使用 Thread Local Storage</h2><p>每个线程通过维护一个线程本地标记来判断同步是否已经完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** If perThreadInstance.get() returns a non-null value, this thread</span></span><br><span class="line"><span class="comment">    has done synchronization needed to see initialization</span></span><br><span class="line"><span class="comment">    of helper */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal perThreadInstance = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">    <span class="keyword">private</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (perThreadInstance.get() == <span class="keyword">null</span>) createHelper();</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">createHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</span><br><span class="line">                helper = <span class="keyword">new</span> Helper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Any non-null value would do as the argument here</span></span><br><span class="line">        perThreadInstance.set(perThreadInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Volatile-变量"><a href="#使用-Volatile-变量" class="headerlink" title="使用 Volatile 变量"></a>使用 Volatile 变量</h2><p>JDK 1.5 之后，Java 增加了 Volatile 语义，它可以</p><ul><li>变量的值永远不会被线程本地缓存，所有读写都将直接进入主存;</li><li>禁止编译器作重排优化，volatile 的读和写建立了一个 happens-before 关系，类似于申请和释放一个互斥锁。</li></ul><p>Volatile 的详细介绍：</p><ul><li><a href="https://www.javamex.com/tutorials/synchronization_volatile.shtml" target="_blank" rel="noopener">https://www.javamex.com/tutorials/synchronization_volatile.shtml</a></li><li><a href="https://zh.wikipedia.org/wiki/Volatile变量" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Volatile变量</a></li><li><a href="https://www.geeksforgeeks.org/volatile-keyword-in-java/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/volatile-keyword-in-java/</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Works with acquire/release semantics for volatile</span></span><br><span class="line"><span class="comment">// Broken under current semantics for volatile</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (helper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</span><br><span class="line">                        helper = <span class="keyword">new</span> Helper();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" target="_blank" rel="noopener">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZooKeeper 运维之命令行接口 &amp; Rest 接口</title>
      <link href="/2018/04/17/zookeeper-ops/"/>
      <url>/2018/04/17/zookeeper-ops/</url>
      <content type="html"><![CDATA[<blockquote><p>项目运维的原因，需要人肉对线上 <a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a> 的部分节点进行修改，设置一串预置的 JSON 字符串。看似很简单的一件事，却着实让我折腾了一番，写一篇记录一下。</p></blockquote><a id="more"></a><h1 id="ZooInspector"><a href="#ZooInspector" class="headerlink" title="ZooInspector"></a>ZooInspector</h1><p>自然想到的第一个方案，是 ZooInspector，它是一个 GUI 版本的 ZooKeeper 管理器，可以通过它来浏览和管理节点。</p><p><img src="https://i.imgur.com/emSRNjl.png" alt="ZooInspector"></p><p>下载地址：<br><a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip" target="_blank" rel="noopener">https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</a></p><p>源代码：<br><a href="https://github.com/apache/zookeeper/tree/master/src/contrib/zooinspector" target="_blank" rel="noopener">https://github.com/apache/zookeeper/tree/master/src/contrib/zooinspector</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>这个方案的问题是，需要线上的 ZooKeeper 服务器对外开放 2181 端口，然而由于 ACL 控制的弱点，运维不允许对外开放这个端口。</p><h1 id="zkCli"><a href="#zkCli" class="headerlink" title="zkCli"></a>zkCli</h1><p>方案二，ZooKeeper 运行包自带命令行工具，可以在服务器上通过命令行来管理节点。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>命令行工具位于 <code>{zk_root}/bin/zkCli.sh</code></p><p>运行后，进入到交互模式，支持以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">stat path [watch]</span><br><span class="line">set path data [version]</span><br><span class="line">ls path [watch]</span><br><span class="line">delquota [-n|-b] path</span><br><span class="line">ls2 path [watch]</span><br><span class="line">setAcl path acl</span><br><span class="line">setquota -n|-b val path</span><br><span class="line">history </span><br><span class="line">redo cmdno</span><br><span class="line">printwatches on|off</span><br><span class="line">delete path [version]</span><br><span class="line">sync path</span><br><span class="line">listquota path</span><br><span class="line">rmr path</span><br><span class="line">get path [watch]</span><br><span class="line">create [-s] [-e] path data acl</span><br><span class="line">addauth scheme auth</span><br><span class="line">quit </span><br><span class="line">getAcl path</span><br><span class="line">close </span><br><span class="line">connect host:port</span><br></pre></td></tr></table></figure><p>通过字面值，就能明白命令的含义。我可以通过 <code>set path data [version]</code> 来完成我的需求，完整的命令：</p><p><code>set /a/b/c json_str</code></p><h2 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>但实际上，待写入的 JSON 串很复杂，同时含有空格、单引号、双引号等字符，导致如下问题：</p><ol><li>空格导致 data 参数被截断，引起 data 不完整，以及 version 参数被错误解析；</li><li>将参数包装一对单引号或者双引号，可以解决空格的问题，但 JSON 中的单引号和双引号同样会引起截断，从而引起第1点中的问题。</li><li>是否可以对 JSON 中的单引号和双引号进行转义？根据经验试了几种可能的转义方法，都不行。</li></ol><p>咱们只能去研究 ZooKeeper 源代码一探究竟了。</p><p>通过 zkCli.sh 脚本，可以定位到源代码起始于 org.apache.zookeeper.ZooKeeperMain 类，我们进一步跟踪到参数解析的关键代码片段，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A storage class for both command line options and shell commands.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandOptions</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ARGS_PATTERN = Pattern.compile(<span class="string">"\\s*([^\"\']\\S*|\"[^\"]*\"|'[^']*')\\s*"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern QUOTED_PATTERN = Pattern.compile(<span class="string">"^([\'\"])(.*)(\\1)$"</span>);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Breaks a string into command + arguments.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cmdstring string of form "cmd arg1 arg2..etc"</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if parsing succeeded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parseCommand</span><span class="params">( String cmdstring )</span> </span>&#123;</span><br><span class="line">        Matcher matcher = ARGS_PATTERN.matcher(cmdstring);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; args = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            String value = matcher.group(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (QUOTED_PATTERN.matcher(value).matches()) &#123;</span><br><span class="line">                <span class="comment">// Strip off the surrounding quotes</span></span><br><span class="line">                value = value.substring(<span class="number">1</span>, value.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            args.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (args.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        command = args.get(<span class="number">0</span>);</span><br><span class="line">        cmdArgs = args;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，核心规则是两个正则表达式。</p><p>第一个表达式 <code>\\s*([^\&quot;\&#39;]\\S*|\&quot;[^\&quot;]*\&quot;|&#39;[^&#39;]*&#39;)\\s*</code>，用于提取参数，规则有三：</p><ol><li>如果参数不是以单引号或双引号开头，则以空格作为参数的结束标志</li><li>如果参数以双引号开头，则以下一个双引号作为结束符</li><li>如果参数以单引号开头，则以下一个单引号作为结束符</li></ol><p>第二个表达式 <code>^([\&#39;\&quot;])(.*)(\\1)$</code>，用于当参数被单引号或双引号包围时，擦除单引号和双引号。</p><p>基于以上结论，可以确定无法支持参数中同时包含空格、单引号、双引号。</p><p><a href="https://github.com/apache/zookeeper" target="_blank" rel="noopener">ZooKeeper 源码</a></p><h1 id="ZooKeeper-Rest-API"><a href="#ZooKeeper-Rest-API" class="headerlink" title="ZooKeeper Rest API"></a>ZooKeeper Rest API</h1><p>方案三，在 ZooKeeper contrib 包中，有一个 Rest 工具，支持以 Rest API 形式的接口对 ZooKeeper 进行管理。最重要的是，它支持以文件的形式对 ZK 节点进行更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#get the root node data</span><br><span class="line">curl http://localhost:9998/znodes/v1/</span><br><span class="line"></span><br><span class="line">#set a node (data.txt contains the ascii text you want to set on the node)</span><br><span class="line">curl -T data.txt -w &quot;\n%&#123;http_code&#125;\n&quot; &quot;http://localhost:9998/znodes/v1/cluster1/leader?dataformat=utf8&quot;</span><br></pre></td></tr></table></figure><p>更多用法，可参考 <a href="https://github.com/apache/zookeeper/tree/master/src/contrib/rest" target="_blank" rel="noopener">https://github.com/apache/zookeeper/tree/master/src/contrib/rest</a></p><h2 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li><p>方法一，如果服务器有安装 Ant 构建工具，可进入到源码目录手动构建、运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#123;zk_root&#125;/src/contrib/rest/</span><br><span class="line">ant run</span><br></pre></td></tr></table></figure></li><li><p>方法二，如果没有 Ant，也可以使用已经构建好的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp &#123;zk_root&#125;/src/contrib/rest/rest.sh &#123;zk_root&#125;/contrib/rest/</span><br><span class="line">cp &#123;zk_root&#125;/zookeeper-3.4.10.jar &#123;zk_root&#125;/contrib/rest/lib/</span><br><span class="line">cd &#123;zk_root&#125;/contrib/rest/</span><br><span class="line">./rest.sh start</span><br></pre></td></tr></table></figure><p>其中 rest.sh 支持 start,stop,restart 参数。</p></li></ol><p>通过检查 zkrest.log 日志文件，可以检查服务是否已经启动。</p><p>通过方案三，问题终于顺利解决。</p>]]></content>
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Blog基于Hexo重建</title>
      <link href="/2018/04/17/blog-rebuild-with-hexo/"/>
      <url>/2018/04/17/blog-rebuild-with-hexo/</url>
      <content type="html"><![CDATA[<blockquote><p>在浏览博客的时候发现一套极简主义风格的皮肤，很干净、清新，非常喜欢，于是给折腾上来了。这套前端基于 Hexo + NexT，替换掉前版的Jekyll + Amaze UI.</p></blockquote><a id="more"></a><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一套快速、简洁且高效的博客框架，基于 Node.js 构建</p><ul><li>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li><li>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li><li>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li><li>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li></ul><p>安装使用说明，直接参考官文：</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/index.html</a></p><h2 id="Github-Repo"><a href="#Github-Repo" class="headerlink" title="Github Repo"></a>Github Repo</h2><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h1 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h1><p>NexT 是一套 Hexo 皮肤，极简主义风格，官方 Slogan 『精于心，简于形』</p><ul><li>一个主题，三种外观，选您所好。通过主题中的主题（亦称 Scheme），您可以方便地改变您博客的外观，同时几乎所有配置同样适用。</li><li>多种语言支持。NexT 现已支持 10 种语言。</li><li>5 套代码高亮主题。NexT 使用 Tomorrow 的代码高亮配色，只需要一行配置，即可选择您所喜爱的配色方案。</li><li>定制属于您自己的 NexT。NexT 拥有丰富而简单的配置，结合第三方服务，打造属于您自己的博客。</li></ul><p>详细的说明和用法，直接参考官文：</p><h2 id="官方文档-1"><a href="#官方文档-1" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://theme-next.org/" target="_blank" rel="noopener">https://theme-next.org/</a></li><li><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">https://theme-next.iissnan.com/</a></li></ul><h2 id="Github-Repo-1"><a href="#Github-Repo-1" class="headerlink" title="Github Repo"></a>Github Repo</h2><ul><li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></li><li><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></li></ul>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程间通信的解决方案</title>
      <link href="/2017/10/31/ipc/"/>
      <url>/2017/10/31/ipc/</url>
      <content type="html"><![CDATA[<blockquote><p>项目中经常会涉及到进程间通信（<a href="https://en.wikipedia.org/wiki/Inter-process_communication" target="_blank" rel="noopener">IPC</a>，Inter-Process Communication）的问题，比如一个任务调度器，对若干个 worker 进行调度和控制。想想，这样的系统模型是不是很多？PHP-fpm，nginx，各类 Application 容器，各类分布式系统……，笔者最近就在做一个类似的项目，需要通过调度器向各个 worker 发送工作指令，并收集从各 worker 反馈回来的信息。那该如何实现呢？</p></blockquote><a id="more"></a><h1 id="进程间有哪些通信方式"><a href="#进程间有哪些通信方式" class="headerlink" title="进程间有哪些通信方式"></a>进程间有哪些通信方式</h1><p>先来整理一下有哪些办法可以做到进程间的通信。</p><ul><li>管道（Pipe）</li><li>命名管道（Named Pipe）</li><li>信号（Signal）</li><li>消息队列（Message Queue）</li><li>共享内存 (Shared Memory)</li><li>内存映射（Mapped Memory）</li><li>信号量（Semaphore）</li><li>套接口（Socket）</li></ul><p>详细说明可参考：</p><ul><li><a href="https://my.oschina.net/hunglish/blog/761140" target="_blank" rel="noopener">https://my.oschina.net/hunglish/blog/761140</a></li><li><a href="https://en.wikipedia.org/wiki/Inter-process_communication" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Inter-process_communication</a></li></ul><h2 id="尝试管道"><a href="#尝试管道" class="headerlink" title="尝试管道"></a>尝试管道</h2><p>主进程与子进程之间通过管道进行流访问，调度器（主进程）写数据到 worker（子进程）的标准输入流，worker 收到后作出响应，调度器再从 worker 的标准输出流读出反馈信息。</p><p>调度器：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Runtime run = Runtime.getRuntime();</span><br><span class="line">Process p = run.exec(<span class="string">"java -jar worker-1.0.0.jar"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> File(<span class="string">"/dir"</span>));</span><br><span class="line"></span><br><span class="line">BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(p.getInputStream());</span><br><span class="line">BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(p.getOutputStream());</span><br><span class="line"></span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line"></span><br><span class="line">writer.write(<span class="string">"Hello world"</span> + System.lineSeparator());</span><br><span class="line">writer.flush();</span><br><span class="line">writer.close();</span><br><span class="line"></span><br><span class="line">String s;</span><br><span class="line"><span class="keyword">while</span> ((s = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Worker:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(System.in);</span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">String strLine = reader.readLine();</span><br><span class="line">System.out.println(<span class="string">"echo:"</span> + strLine);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>功能一切正常，代码也不复杂。那可行吗？有个大麻烦！我得自己实现一套指令协议，并且严格控制两个进程的读写同步，不然程序会失控。</p><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><ul><li>信号，数据承载量太小，不合适</li><li>消息队列，引入系统架构的复杂度，不符合我的简洁之道</li><li>共享内存&amp;内存映射，非常高效，但是有管道方案同样的问题，需要同步各进程之间对内存读写的同步，非常麻烦</li><li>套接字，下面讨论</li></ul><h2 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h2><p>要说套接字，就要先说说 <a href="https://en.wikipedia.org/wiki/Berkeley_sockets" target="_blank" rel="noopener">Berkeley Sockets</a>，它是被专门设计用来做 IPC 的 API，除了支持本机进程间通信外（<a href="https://en.wikipedia.org/wiki/Unix_domain_socket" target="_blank" rel="noopener">Unix Domain Socket</a>），也可以支持跨机器的 IPC，也就是我们常说的 <a href="https://en.wikipedia.org/wiki/Network_socket" target="_blank" rel="noopener">Network Socket</a>。</p><p>在我的项目中，调度器与 worker 在同一个机器上，所以采用 Unix Domain Socket 看起来是最合理的，这种方式不走网络模型，是通过操作系统内核来完成交互的，基于文件作为通信信道。（是不是有点眼熟？fpm.sock，mysql.sock，……）</p><p>看起来可行？我们只需要定义一个简单的指定协议来格式化数据流，看起来很完美。</p><p>很不幸，Java 无法直接支持 Unix Domain Socket，需要第三方 Native Code 的支持。原因很简单，Java 是通用语言，而 Unix Domain Socket 是平台相关的技术。参考：</p><ul><li><a href="https://stackoverflow.com/questions/4099432/unix-domain-socket-in-java" target="_blank" rel="noopener">https://stackoverflow.com/questions/4099432/unix-domain-socket-in-java</a></li><li><a href="https://github.com/jnr/jnr-unixsocket" target="_blank" rel="noopener">https://github.com/jnr/jnr-unixsocket</a></li><li><a href="https://github.com/kohlschutter/junixsocket" target="_blank" rel="noopener">https://github.com/kohlschutter/junixsocket</a></li></ul><p>那 Network Socket 可以吗？可以，一种基于 Network Socket 实现的，并且编程模型良好的技术方案，那就是 <a href="https://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank" rel="noopener">RPC</a>。很多编程语言都支持 RPC，其支持的协议也不尽相同，这里我们就重点说一下 Java RPC 的方案：<a href="https://en.wikipedia.org/wiki/Java_remote_method_invocation" target="_blank" rel="noopener">RMI</a>（Java remote method invocation)，通过抽象屏蔽了底层网络传输的细节，程序员只关注高层代码的实现，对远程方法的调用就像调用本地方法一样的方便。具体的技术细节，可参考前述链接或者官方文档。</p><p>太赞了，这样我们连指令协议都不用制定了。</p><p>以下是简单的代码样例：</p><p>Worker 端作为 RMI 的服务端，接受调度器的调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JobService jobService = <span class="keyword">new</span> JobServiceImpl(args[<span class="number">0</span>]);</span><br><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> port = ((UnicastServerRef)((RegistryImpl)registry).getRef()).getLiveRef().getPort();</span><br><span class="line">String name = <span class="string">"rmi://127.0.0.1:"</span> + port + <span class="string">"/JobService"</span>;</span><br><span class="line">Naming.rebind(name, jobService);</span><br></pre></td></tr></table></figure><p></p><p>调度器调用 worker 的功能<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String endPoint = <span class="string">"rmi://127.0.0.1:"</span> + port + <span class="string">"/JobService"</span>;</span><br><span class="line">JobService jobService = (JobService) Naming.lookup(endPoint);</span><br><span class="line">jobService.doSomething();</span><br></pre></td></tr></table></figure><p></p><p>因为会有很多 worker，所以 worker 端的端口号分配就成为了问题，这里有个小窍门，<code>LocateRegistry.createRegistry</code> 方法传入端口 0，系统会自动分配一个空闲的端口。worker 再通过标准输出流告诉调度器。（所以这里结合了“管道”技术，来协调整个系统的和谐运行）。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>任何目标的达成，都有多种途径，我们应该选择合理、简单、实用、快捷的方式，在保证快速达成目标的同时，尽可能地确保系统后期的可维护性。</p>]]></content>
      
      <categories>
          
          <category> 技术研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IPC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用 Code Sniffer 检查 PHP 代码规范</title>
      <link href="/2017/06/11/php-code-sniffer/"/>
      <url>/2017/06/11/php-code-sniffer/</url>
      <content type="html"><![CDATA[<blockquote><p>作为一个新手，写出规范的代码也是一门必修课，除了阅读相应的代码规范文档之外，充分利用相关的工具能使得进阶之路事半功倍。今天这篇分享将简单地梳理一下 PHP 规范，并介绍一个代码检查工具 Code Sniffer，结合 PHPStorm 以及 GIT 进行实践。</p></blockquote><a id="more"></a><h1 id="PHP-规范"><a href="#PHP-规范" class="headerlink" title="PHP 规范"></a>PHP 规范</h1><p>为什么需要统一代码规范？</p><blockquote><p>PHP 社区百花齐放，拥有大量的函数库、框架和组件。PHP 开发者通常会在自己的项目中使用若干个外部库，因此 PHP 代码遵循（尽可能接近）同一个代码风格就非常重要，这让开发者可以轻松地将多个代码库整合到自己的项目中。</p></blockquote><p>目前流行的一些规范：</p><ul><li><p>PSR</p><p>PSR 是 PHP Standard Recommendations 的简写，由 <a href="https://github.com/php-fig" target="_blank" rel="noopener">PHP FIG</a> 组织制定的 PHP 规范，是 PHP 开发的实践标准。</p><p>PHP FIG，FIG 是 Framework Interoperability Group（框架可互用性小组）的缩写，由几位开源框架的开发者成立于 2009 年，从那开始也选取了很多其他成员进来（包括但不限于 <a href="http://laravel.com/" target="_blank" rel="noopener">Laravel</a>, <a href="https://www.joomla.org/" target="_blank" rel="noopener">Joomla</a>, <a href="https://www.drupal.org/" target="_blank" rel="noopener">Drupal</a>, <a href="https://getcomposer.org/" target="_blank" rel="noopener">Composer</a>, <a href="https://phalconphp.com/en/" target="_blank" rel="noopener">Phalcon</a>, <a href="http://www.slimframework.com/" target="_blank" rel="noopener">Slim</a>, <a href="http://symfony.com/" target="_blank" rel="noopener">Symfony</a>, <a href="http://framework.zend.com/" target="_blank" rel="noopener">Zend Framework</a> 等），虽然不是「官方」组织，但也代表了大部分的 PHP 社区。</p><p>项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。</p><p>目前已表决通过了 6 套标准，已经得到大部分 PHP 框架的支持和认可。</p><p>详细介绍请参考官方说明：</p><ul><li><a href="https://psr.phphub.org/" target="_blank" rel="noopener">中文文档</a></li><li><a href="http://www.php-fig.org/psr/" target="_blank" rel="noopener">官方网站</a></li></ul></li><li><p>PEAR</p><p>The PEAR Coding Standards apply to code that is part of the official PEAR distribution. Coding standards often abbreviated as CS among developers and they aim to keep code consistent to be easily readable and maintainable by most of PEAR folks.</p><p>参考<a href="http://pear.php.net/manual/en/standards.php" target="_blank" rel="noopener">官方说明</a></p></li><li><p>Zend</p><p>Zend Framework 使用的代码规范。</p><p>参考<a href="https://framework.zend.com/manual/1.11/en/coding-standard.html" target="_blank" rel="noopener">官方说明</a></p></li></ul><h1 id="Code-Sniffer"><a href="#Code-Sniffer" class="headerlink" title="Code Sniffer"></a>Code Sniffer</h1><p>官方网站：<a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank" rel="noopener">https://github.com/squizlabs/PHP_CodeSniffer</a></p><blockquote><p>PHP_CodeSniffer is a set of two PHP scripts; the main phpcs script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second phpcbf script to automatically correct coding standard violations. PHP_CodeSniffer is an essential development tool that ensures your code remains clean and consistent.</p></blockquote><p>简单来说，就是两个小工具，</p><ul><li>phpcs (PHP Code Standard)，用来检查代码规范</li><li>phpcbf (PHP Code Beautifier and Fixer)，用来自动修复代码</li></ul><h2 id="安装-Code-Sniffer"><a href="#安装-Code-Sniffer" class="headerlink" title="安装 Code Sniffer"></a>安装 Code Sniffer</h2><p>参考<a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank" rel="noopener">官方文档</a></p><h2 id="使用-Code-Sniffer"><a href="#使用-Code-Sniffer" class="headerlink" title="使用 Code Sniffer"></a>使用 Code Sniffer</h2><p><strong>执行 phpcs 检查代码规范</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> phpcs /path/to/code/myfile.php</span><br><span class="line"></span><br><span class="line">FILE: /path/to/code/myfile.php</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">FOUND 5 ERRORS AFFECTING 4 LINES</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 2 | ERROR | [ ] Missing file doc comment</span><br><span class="line"> 3 | ERROR | [x] TRUE, FALSE and NULL must be lowercase; expected "false" but</span><br><span class="line">   |       |     found "FALSE"</span><br><span class="line"> 5 | ERROR | [x] Line indented incorrectly; expected at least 4 spaces, found 1</span><br><span class="line"> 8 | ERROR | [ ] Missing function doc comment</span><br><span class="line"> 8 | ERROR | [ ] Opening brace should be on a new line</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">PHPCBF CAN FIX THE 2 MARKED SNIFF VIOLATIONS AUTOMATICALLY</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>Code-Sniffer 默认使用 PEAR 代码规范。可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```shell</span><br><span class="line">$ phpcs --standard=PSR2 /path/to/code/myfile.php</span><br></pre></td></tr></table></figure><p></p><p>或者修改默认配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> phpcs --config-set default_standard Squiz</span><br></pre></td></tr></table></figure><p><strong>执行 phpcbs 修复代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> phpcbf /path/to/code</span><br><span class="line">Processing init.php [PHP =&gt; 7875 tokens in 960 lines]... DONE in 274ms (12 fixable violations)</span><br><span class="line">    =&gt; Fixing file: 0/12 violations remaining [made 3 passes]... DONE in 412ms</span><br><span class="line">Processing config.php [PHP =&gt; 8009 tokens in 957 lines]... DONE in 421ms (155 fixable violations)</span><br><span class="line">    =&gt; Fixing file: 0/155 violations remaining [made 7 passes]... DONE in 937ms</span><br><span class="line">Patched 2 files</span><br><span class="line">Time: 2.55 secs, Memory: 25.00Mb</span><br></pre></td></tr></table></figure><p>更多功能，参考<a href="https://github.com/squizlabs/PHP_CodeSniffer/wiki" target="_blank" rel="noopener">官方文档</a></p><h2 id="与-PHP-Storm-集成"><a href="#与-PHP-Storm-集成" class="headerlink" title="与 PHP Storm 集成"></a>与 PHP Storm 集成</h2><p>将 Code Sniffer 与 PHP Storm 集成，可以使 IDE 实时显示代码的规范情况，提醒开发人员修改代码，长期使用，可以让开发人员养成非常规范的代码习惯。</p><p><img src="http://imgur.com/bl4kgYl.png" alt="ide"></p><p>如何配置？</p><ol><li>为 PHPStorm 配置 Code Sniffer 路径：<br><img src="http://imgur.com/X4rIc0e.png" alt="code-sniffer"><br><img src="http://imgur.com/TdqQVfz.png" alt="code-sniffer"></li><li><p>设置 Inspections</p><p>选择合适的 Coding Standard<br><img src="http://imgur.com/hLmHbZo.png" alt=""></p></li></ol><h2 id="利用-GIT-Hook-强制代码检查"><a href="#利用-GIT-Hook-强制代码检查" class="headerlink" title="利用 GIT Hook 强制代码检查"></a>利用 GIT Hook 强制代码检查</h2><p>使用 GIT 的 Pre-Commit Hook，可以在代码被提交之前，强制调用 Code Sniffer 进行代码检查，如果不符合规范，将阻止用户提交代码。</p><ol><li>在项目的 <code>.git/hooks</code> 建立 <code>pre-commit</code> 文件</li><li>写入代码：<br><a href="https://gist.githubusercontent.com/yangzhyo/6dad52e862c5efa368c992efc52e1fb9/raw/dec18f55ddfdf6eeb6d659a19398ec2d106fface/pre-commit.php" target="_blank" rel="noopener">Pre-Commit Gist</a></li></ol><p>试试看:)</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>会使用工具进行生产活动是人类区别于动物成为智慧生物的本质，IT 技术生产活动亦是如此，使用工具提高生产效能则是一个优秀技术人员必备素质。</p>]]></content>
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Coding Standard </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 调试利器 - Xdebug</title>
      <link href="/2017/06/10/php-xdebug/"/>
      <url>/2017/06/10/php-xdebug/</url>
      <content type="html"><![CDATA[<blockquote><p>工欲善其事必先利其器，学习一门新语言，调试器的使用必不可少，我们一般习惯通过 echo 或者 var_dump 来调试程序，但还有更多的选择。</p></blockquote><a id="more"></a><p>PHP 目前有两种流行的调试器，</p><ul><li><a href="https://xdebug.org/" target="_blank" rel="noopener">Xdebug</a></li><li><a href="https://www.zend.com/en/products/server/z-ray" target="_blank" rel="noopener">Zend Debugger</a></li></ul><p>我在学习和研究过程中，发现网上的各种信息过于凌乱，感到痛苦，影响理解和使用。今天我以 Xdebug 为例，先解释其基本的工作原理，再说明生产过程中如何使用，希望能带给大家清晰易懂的知识。</p><h1 id="Xdebug"><a href="#Xdebug" class="headerlink" title="Xdebug"></a>Xdebug</h1><p>Xdebug 是一个 PHP 扩展，它采用 DBGp 协议，提供了对 PHP 进行 Debugging 和 Profiling 的能力。</p><p>Debug 信息包含：</p><ul><li>stack and function traces in error messages with:<ol><li>full parameter display for user defined functions</li><li>function name, file name and line indications</li><li>support for member functions</li></ol></li><li>memory allocation</li><li>protection for infinite recursions</li></ul><p>此外，Xdebug 还提供以下功能：</p><ul><li>profiling information for PHP scripts</li><li>code coverage analysis</li><li>capabilities to debug your scripts interactively with a debugger front-end</li></ul><p>今天只讨论 Debug，其它功能以后有机会再分享。</p><h2 id="Debug原理"><a href="#Debug原理" class="headerlink" title="Debug原理"></a>Debug原理</h2><p>原文参考：<a href="https://xdebug.org/docs/remote" target="_blank" rel="noopener">https://xdebug.org/docs/remote</a></p><p>简单来说，XDebug 调试是一种 C/S 结构，Client 是 PHP-Xdebug 插件，Server 是我们的 IDE（或者各种Editor插件），中间通过 <a href="https://xdebug.org/docs-dbgp.php" target="_blank" rel="noopener">DBGp</a> 协议通信。PHP 脚本在运行时，由 Xdebug 插件向 IDE 发起连接，将调试信息发送给 IDE，并通过 DBGp 协议进行互动。</p><p>看下图，就明白了：</p><p><img src="https://xdebug.org/images/docs/dbgp-setup.gif" alt="xdebug运行结构"></p><ul><li>The IP of the server is 10.0.1.2 with HTTP on port 80</li><li>The IDE is on IP 10.0.1.42, so <a href="https://xdebug.org/docs/all_settings#remote_host" target="_blank" rel="noopener">xdebug.remote_host</a> is set to 10.0.1.42</li><li>The IDE listens on port 9000, so <a href="https://xdebug.org/docs/all_settings#remote_port" target="_blank" rel="noopener">xdebug.remote_port</a> is set to 9000</li><li>The HTTP request is started on the machine running the IDE</li><li>Xdebug connects to 10.0.1.42:9000</li><li>Debugging runs, HTTP Response provided</li></ul><p>以上是单人模式，在 php.ini 中配置了 IDE 的 IP 地址以及监听的端口。这种模式的缺陷是配死了 IDE 目标，不能支持多用户调试。所以 Xdebug 还提供了一种多用户的调试模式，这种模式无需配置 remote_host，而是配置 <a href="https://xdebug.org/docs/all_settings#remote_connect_back" target="_blank" rel="noopener">xdebug.remote_connect_back</a>=On，Xdebug 会记下来访地址，作为调试时的连接目标。调试过程如下：</p><p><img src="https://xdebug.org/images/docs/dbgp-setup2.gif" alt="xdebug运行结构"></p><ul><li>The IP of the server is 10.0.1.2 with HTTP on port 80</li><li>The IDE is on an unknown IP, so <a href="https://xdebug.org/docs/all_settings#remote_connect_back" target="_blank" rel="noopener">xdebug.remote_connect_back</a> is set to 1</li><li>The IDE listens on port 9000, so <a href="https://xdebug.org/docs/all_settings#remote_port" target="_blank" rel="noopener">xdebug.remote_port</a> is set to 9000</li><li>The HTTP request is made, Xdebug detects the IP addres from the HTTP headers</li><li>Xdebug connects to the detected IP (10.0.1.42) on port 9000</li><li>Debugging runs, HTTP Response provided</li></ul><p>搞明白了原理，那我们就开始实践吧。</p><h2 id="安装Xdebug"><a href="#安装Xdebug" class="headerlink" title="安装Xdebug"></a>安装Xdebug</h2><p>根据各自不同的工作站平台，参考<a href="https://xdebug.org/docs/install" target="_blank" rel="noopener">官方安装指导</a>.</p><p>安装的时候注意一下输出信息，记下安装好的扩展包位置，下一步配置PHP时会用到。</p><h2 id="配置PHP-Xdebug"><a href="#配置PHP-Xdebug" class="headerlink" title="配置PHP-Xdebug"></a>配置PHP-Xdebug</h2><p>打开 php.ini（不知道 php.ini 在哪里的，可以输出 phpinfo() 看看），然后加上对 Xdebug 扩展的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Xdebug]</span><br><span class="line">zend_extension="/usr/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so"</span><br><span class="line">xdebug.remote_enable=On</span><br></pre></td></tr></table></figure><p>xdebug.remote_enable=On，表示打开远程调试开关，这是必须的。</p><p>然后，有两种方法可以验证一下插件是否加载成功：</p><ol><li><p>命令行执行 php -v，看看</p><p><img src="http://imgur.com/3UbEnNo.png" alt="pic"></p></li><li><p>网页输出 phpinfo()</p><p><img src="http://imgur.com/r3I8FZF.png" alt="pic"></p></li></ol><p>以上输出若能看到 Xdebug 版本信息，就 ok 了。另外，在 phpinfo 中，可以看到 xdebug 的配置信息，搜搜看，这些配置都是可以在 php.ini 中进行修改的，各自代表的意思大家可以查官网，这里就不详述了。</p><p><img src="http://imgur.com/mYvST9x.png" alt="phpinfo"></p><h2 id="配置IDE"><a href="#配置IDE" class="headerlink" title="配置IDE"></a>配置IDE</h2><p>以 PHPStorm 为例，PHPStorm 实现了 DBGp 协议，我们需要配置它监听的端口，这个端口号需要与 xdebug.remote_port 一致，才能确保调试时 PHP-Xdebug 能连上 IDE。</p><p>以下是默认配置，如果没有冲突可以不用改。在帮其他同学 trouble shooting 时，发现 php-fpm 和 xdebug 默认都使用 9000 号端口，真是一个奇怪的配置啊，难道他们俩不应该经常被同时使用吗？如果你发现自己的 debug 不能正常工作，不妨检查一下这一点，将他们调整为不同的端口。</p><p><img src="http://imgur.com/LO1jY1d.png" alt="pic"></p><h2 id="开始Debug"><a href="#开始Debug" class="headerlink" title="开始Debug"></a>开始Debug</h2><p>之前说过，IDE 是作为一个 Server 的角色监听特定端口，等待 Xdebug 来连接，对于 PHPStorm 开启监听非常简单，直接点击右上角的“小电话”按钮：</p><p><img src="http://imgur.com/AkOjV7B.png" alt="pic"></p><p>变成</p><p><img src="http://imgur.com/flNtKQS.png" alt="pic"></p><p>然后在代码里面打下断点。</p><p>接下来，开始运行并调试代码。针对不同类型的应用，方法也不一样。但目的都是相同的，就是要告诉 PHP-Xdebug，我要开始调试了，给我把调试信息发过来！</p><h3 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h3><p>两种方法：</p><ol><li><p>在请求的 URL 地址后面加一个 QueryString:XDEBUG_SESSION_START=session_name（当然用 POST 参数也可以），这样 PHP-Xdebug 就会知道该连接 IDE 调试了。</p><p>其实 IDE 提供了快捷的操作方式，不用你手动写 URL 参数。见 <a href="https://confluence.jetbrains.com/display/PhpStorm/Debugging+PHP+Web+Applications+with+Run+Debug+Configurations" target="_blank" rel="noopener">Debugging PHP Web Applications with Run Debug Configurations</a>，简单来说，就是你需要配置好 Web Server，PHP Web Application，再点击后上角的“小瓢虫”按钮，IDE 就会自动打开浏览器，帮你输好网址，并添加 QueryString:XDEBUG_SESSION_START=session_name。</p></li><li><p>安装浏览器插件，插件会在你请求一个 PHP 页面时，带上一个 XDEBUG_SESSION Cookie，这样就不用在 URL 上带参数了。</p><p>支持的插件：</p><ul><li>Firefox: <a href="https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/" target="_blank" rel="noopener">the-easiest-xdebug</a></li><li>Chrome: <a href="https://chrome.google.com/extensions/detail/eadndfjplgieldjbigjakmdgkmoaaaoc" target="_blank" rel="noopener">Xdebug helper</a></li><li>Safari: <a href="http://benmatselby.posterous.com/xdebug-toggler-for-safari" target="_blank" rel="noopener">xdebug-toggler-for-safari</a></li><li>Opera: <a href="https://addons.opera.com/addons/extensions/details/xdebug-launcher/?display=en" target="_blank" rel="noopener">xdebug-launcher</a></li></ul></li></ol><p>试试以上两种方法，断点命中！开始享受调试。</p><h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><p>一般用在命令行程序或者单元测试的调试中。</p><p>我们需要通过设置环境变量 XDEBUG_CONFIG 来通知 Xdebug 进行调试。当然，我们可以向这个环境变量中添加更多的设置来配置 Xdebug（这些配置都可以在 php.ini 中进行设置）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export XDEBUG_CONFIG="idekey=session_name"</span><br><span class="line">php myscript.php</span><br></pre></td></tr></table></figure><p>断点命中！</p><p>不想调试了，释放掉这个环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset XDEBUG_CONFIG</span><br></pre></td></tr></table></figure><p>小技巧，如果你用 Zsh，可以为上述两段小代码设置别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias xdebug-on="export XDEBUG_CONFIG=\"idekey=PHPSTORM\""</span><br><span class="line">alias xdebug-off="unset XDEBUG_CONFIG"</span><br></pre></td></tr></table></figure><p>PHPStorm 也提供了快捷的操作，见 <a href="https://confluence.jetbrains.com/display/PhpStorm/Debugging+PHP+CLI+scripts+with+PhpStorm" target="_blank" rel="noopener">Debugging PHP CLI scripts with PhpStorm</a></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>搞完上述研究，真是够折腾，真心觉得还是怀念 VS，不愧是宇宙第一 IDE，啥都不用管。总之，希望这篇小文章能让你感到清晰一点，有问题或者建议，可以留下评论一起讨论。</p>]]></content>
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Xdebug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>折腾 macOS 的 Terminal 环境</title>
      <link href="/2017/05/30/mac-os-terminal/"/>
      <url>/2017/05/30/mac-os-terminal/</url>
      <content type="html"><![CDATA[<blockquote><p>今天是传统端午节，大家吃粽子了吗？老羊在上海祝大家节日快乐。</p></blockquote><p>最近老羊的工作语言从 .NET 换成了 PHP，工作站也从 Windows 切到了 macOS 上。新的环境，必然是各种折（Zhuang）腾（Bi），今天先折腾 Terminal，默认的实在是有点古董。</p><a id="more"></a><h1 id="改装-macOS-默认-Terminal"><a href="#改装-macOS-默认-Terminal" class="headerlink" title="改装 macOS 默认 Terminal"></a>改装 macOS 默认 Terminal</h1><p>先看看效果：</p><p><img src="http://i.imgur.com/SbA1VGI.png" alt="my terminal"></p><h3 id="改装清单"><a href="#改装清单" class="headerlink" title="改装清单"></a>改装清单</h3><ul><li>iTerm 2</li><li>iTerm Solarized theme</li><li>zsh</li><li>oh-my-zsh</li><li>Powerline font</li><li>zsh agnoster theme</li><li>zsh-syntax-highlighting plugin</li></ul><h1 id="改装过程"><a href="#改装过程" class="headerlink" title="改装过程"></a>改装过程</h1><h2 id="iTerm"><a href="#iTerm" class="headerlink" title="iTerm"></a>iTerm</h2><blockquote><p><strong><a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm</a></strong> 是 macOS 默认终端程序（Terminal）的替代品，它带来更现代的体验。</p></blockquote><h3 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？</h3><p>直接 <a href="http://www.iterm2.com/downloads.html" target="_blank" rel="noopener">下载</a>，拖拽到应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">### 更改配色方案为 Solarized</span><br><span class="line">iTerm2 内置了几套配色方案，大家可以根据自己的喜好选择。直接在 ```iTerm2 - Preferences - Profiles - Colors``` 里面配置就好。在下用的是 Solarized Dark.</span><br><span class="line"></span><br><span class="line">![Colors](http://imgur.com/U5P9pBD.png)</span><br><span class="line">### 彩色的文字 </span><br><span class="line">去掉 ```iTerm2 - Preferences - Profiles - Text - Text Rendering```，将 Draw bold text in bright colors 前面的勾，终端上该显示的彩色文字就回来了。</span><br><span class="line">### 自动完成</span><br><span class="line">通过快捷键 ```command+;``` 可自动联想出一些命令；</span><br><span class="line">![AutoComp](http://www.iterm2.com/img/screenshots/autocomplete.png)</span><br><span class="line">### 快捷呼出</span><br><span class="line">iTerm 提供了非常方便快捷的呼出功能，不管你的桌面环境有多么复杂，一个快捷键就能把终端呼出。</span><br><span class="line">在```iTerm2 - Preferences - Key```设置：</span><br><span class="line"></span><br><span class="line">![Hotkey](http://imgur.com/PPgeHNI.png)</span><br><span class="line"></span><br><span class="line">* 第一个选项是设置快捷呼出的快捷键；</span><br><span class="line">* 第二个选项是另外一种形式的呼出（会在屏幕的上部展开一层半透明的窗体），如果这个选项未打开，默认是呼出 iTerm 窗体。</span><br><span class="line">![Hotkey](http://imgur.com/8Lg58dX.png)</span><br><span class="line"></span><br><span class="line">是不是很 Cool？注意这里可以为这个折叠层的显示设置单独设定一个 Profile，当然也可以共享默认的 Profile。</span><br><span class="line"></span><br><span class="line">### 其它很酷的特性</span><br><span class="line">这里不一一列举了，待大家到 [官网](http://www.iterm2.com/features.html) 发掘。</span><br><span class="line"></span><br><span class="line">## zsh</span><br><span class="line">macOS 默认 Shell 是 bash，而我们要改装的是另一款强大的 Shell: [zsh](http://www.zsh.org/)，全称 Z Shell，相比 bash 有大量的改进，参考[Wiki](https://zh.wikipedia.org/wiki/Z_shell)。</span><br><span class="line"></span><br><span class="line">在 ```/etc/shells``` 文件列举了所有支持的 shell 解释器:</span><br><span class="line"></span><br><span class="line">``` shell</span><br><span class="line">cat /etc/shells</span><br><span class="line"># List of acceptable shells for chpass(1).</span><br><span class="line"># Ftpd will not allow users to connect who are not using</span><br><span class="line"># one of these shells.</span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p></p><p>如果想改变默认的 shell，可执行</p><figure class="highlight plain"><figcaption><span>-s</span><a href="/bin/zsh```。这里我们不用手动改变，安装好">oh-my-zsh 后会自动修改。</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## oh-my-zsh</span><br><span class="line">zsh 配置复杂，交给 [oh-my-zsh](http://ohmyz.sh/) 来管理。</span><br><span class="line">&gt; Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout...</span><br><span class="line"></span><br><span class="line">### 安装</span><br><span class="line">``` shell</span><br><span class="line">$ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p></p><h3 id="Agnoster-theme"><a href="#Agnoster-theme" class="headerlink" title="Agnoster theme"></a>Agnoster theme</h3><p><a href="https://github.com/agnoster/agnoster-zsh-theme" target="_blank" rel="noopener">Agnoster theme</a> 是 zsh 的一个 theme，看起来非常的酷。</p><p><img src="https://gist.githubusercontent.com/agnoster/3712874/raw/screenshot.png" alt="agnoster-theme"></p><p>要用好这套 theme，有两个准备条件：</p><ol><li><p>推荐配合 iTerm 2 + Solarized Dark 使用</p><p>看默认的 Terminal + bash 有多丑：<br><img src="http://imgur.com/c5CJGVB.png" alt="terminal"></p></li><li><p>安装 Powerline 字体，否则那些酷酷的符号无法正确显示</p><p>这里下载：<a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">Powerline-patched font</a></p><p>安装后，在</p><figure class="highlight plain"><figcaption><span>- Preferences - Profiles - Text - Font``` 修改字体为 Powerline 提供的字体，在下用的是 ```Meslo LG S DZ Regular for Powerline```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">准备好上述条件后，</span><br><span class="line"></span><br><span class="line">1. 从 Agnoster 的 [Repo](https://github.com/agnoster/agnoster-zsh-theme) 下载 Theme 到 ```~/.oh-my-zsh/themes/```（有可能皮肤已经默认被安装了，检查一下）</span><br><span class="line">2. 修改配置文件 ```~/.zshrc</span><br></pre></td></tr></table></figure><p></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="agnoster"</span><br></pre></td></tr></table></figure></li><li><p>命令行默认会显示用户名和机器名，可能会比较长，可以通过修改主题脚本来解决，将</p><figure class="highlight plain"><figcaption><span>中的 ```prompt_conext()``` 方法中的代码注释掉即可。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## zsh-syntax-highlighting plugin</span><br><span class="line">&gt; 一个锦上添花的[插件](https://github.com/zsh-users/zsh-syntax-highlighting)，可以在你敲命令的时候，识别命令的正确性，正确显示为绿色，错误显示为红色。</span><br><span class="line"></span><br><span class="line">### 安装过程</span><br><span class="line"></span><br><span class="line">1. Clone this repository in oh-my-zsh&apos;s plugins directory:</span><br><span class="line"></span><br><span class="line">```git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p></p></li></ol><ol start="2"><li><p>Activate the plugin in ~/.zshrc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. Source ~/.zshrc to take changes into account:</span><br><span class="line"></span><br><span class="line">```source ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol><h3 id="更多很酷的插件"><a href="#更多很酷的插件" class="headerlink" title="更多很酷的插件"></a>更多很酷的插件</h3><p>见 <a href="https://github.com/unixorn/awesome-zsh-plugins" target="_blank" rel="noopener">awesome-zsh-plugins</a></p>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>中文文案排版指北</title>
      <link href="/2017/05/01/chinese-copywriting-guidelines/"/>
      <url>/2017/05/01/chinese-copywriting-guidelines/</url>
      <content type="html"><![CDATA[<blockquote><p>原始Repository: <a href="https://github.com/mzlogin/chinese-copywriting-guidelines" target="_blank" rel="noopener">https://github.com/mzlogin/chinese-copywriting-guidelines</a></p></blockquote><p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p><a id="more"></a><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#空格">空格</a><ul><li><a href="#中英文之间需要增加空格">中英文之间需要增加空格</a></li><li><a href="#中文与数字之间需要增加空格">中文与数字之间需要增加空格</a></li><li><a href="#数字与单位之间需要增加空格">数字与单位之间需要增加空格</a></li><li><a href="#全角标点与其他字符之间不加空格">全角标点与其他字符之间不加空格</a></li><li><a href="#-ms-text-autospace-to-the-rescue"><code>-ms-text-autospace</code> to the rescue?</a></li></ul></li><li><a href="#标点符号">标点符号</a><ul><li><a href="#不重复使用标点符号">不重复使用标点符号</a></li></ul></li><li><a href="#全角和半角">全角和半角</a><ul><li><a href="#使用全角中文标点">使用全角中文标点</a></li><li><a href="#数字使用半角字符">数字使用半角字符</a></li><li><a href="#遇到完整的英文整句特殊名词其內容使用半角标点">遇到完整的英文整句、特殊名词，其內容使用半角标点</a></li></ul></li><li><a href="#名词">名词</a><ul><li><a href="#专有名词使用正确的大小写">专有名词使用正确的大小写</a></li><li><a href="#不要使用不地道的缩写">不要使用不地道的缩写</a></li></ul></li><li><a href="#争议">争议</a><ul><li><a href="#链接之间增加空格">链接之间增加空格</a></li><li><a href="#简体中文使用直角引号">简体中文使用直角引号</a></li></ul></li><li><a href="#工具">工具</a></li><li><a href="#谁在这样做">谁在这样做？</a></li><li><a href="#参考文献">参考文献</a></li></ul><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></p><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p></blockquote><blockquote><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p></blockquote><blockquote><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p></blockquote><p>例外：度／百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p></blockquote><h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a><code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85" target="_blank" rel="noopener"><code>-ms-text-autospace</code></a>.aspx) 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p></blockquote><blockquote><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p></blockquote><blockquote><p>德国队竟然战胜了巴西队！！！！！！！！</p></blockquote><blockquote><p>她竟然对你说「喵」？？！！</p></blockquote><blockquote><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角</a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p></blockquote><blockquote><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p></blockquote><blockquote><p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!</p></blockquote><blockquote><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p></blockquote><blockquote><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这件蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这件蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p></blockquote><blockquote><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p></blockquote><blockquote><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p></blockquote><blockquote><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p></blockquote><blockquote><p>使用 GITHUB 登录</p></blockquote><blockquote><p>使用 Github 登录</p></blockquote><blockquote><p>使用 gitHub 登录</p></blockquote><blockquote><p>使用 gｲんĤЦ8 登录</p></blockquote><blockquote><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p></blockquote><blockquote><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p></blockquote><blockquote><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a href="https://github.com/vinta/paranoid-auto-spacing" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></td><td>JavaScript</td></tr><tr><td><a href="https://github.com/huei90/pangu.node" target="_blank" rel="noopener">huei90/pangu.node</a></td><td>Node.js</td></tr><tr><td><a href="https://github.com/huacnlee/auto-correct" target="_blank" rel="noopener">huacnlee/auto-correct</a></td><td>Ruby</td></tr><tr><td><a href="https://github.com/sparanoid/space-lover" target="_blank" rel="noopener">sparanoid/space-lover</a></td><td>PHP (WordPress)</td></tr><tr><td><a href="https://github.com/NauxLiu/auto-correct" target="_blank" rel="noopener">nauxliu/auto-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/ricoa/copywriting-correct" target="_blank" rel="noopener">ricoa/copywriting-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/hotoo/pangu.vim" target="_blank" rel="noopener">hotoo/pangu.vim</a></td><td>Vim</td></tr><tr><td><a href="https://github.com/sparanoid/grunt-auto-spacing" target="_blank" rel="noopener">sparanoid/grunt-auto-spacing</a></td><td>Node.js (Grunt)</td></tr><tr><td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" target="_blank" rel="noopener">hjiang/scripts/add-space-between-latin-and-cjk</a></td><td>Python</td></tr></tbody></table><h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a href="http://www.apple.com/cn/" target="_blank" rel="noopener">Apple 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/hk/" target="_blank" rel="noopener">Apple 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/tw/" target="_blank" rel="noopener">Apple 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-cn/" target="_blank" rel="noopener">Microsoft 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-hk/" target="_blank" rel="noopener">Microsoft 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-tw/" target="_blank" rel="noopener">Microsoft 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="http://apple4us.com/" target="_blank" rel="noopener">Apple4us</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.wandoujia.com/" target="_blank" rel="noopener">豌豆荚</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://ruby-china.org/" target="_blank" rel="noopener">Ruby China</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="https://phphub.org/" target="_blank" rel="noopener">PHPHub</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="http://sspai.com/" target="_blank" rel="noopener">少数派</a></td><td>Yes</td><td>N/A</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm" target="_blank" rel="noopener">Guidelines for Using Capital Letters</a></li><li><a href="http://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="noopener">Letter case - Wikipedia</a></li><li><a href="http://www.oxforddictionaries.com/words/punctuation" target="_blank" rel="noopener">Punctuation - Oxford Dictionaries</a></li><li><a href="https://owl.english.purdue.edu/owl/section/1/6/" target="_blank" rel="noopener">Punctuation - The Purdue OWL</a></li><li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly" target="_blank" rel="noopener">How to Use English Punctuation Corrently - wikiHow</a></li><li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">格式 - openSUSE</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" target="_blank" rel="noopener">引号 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" target="_blank" rel="noopener">疑问惊叹号 - 维基百科</a></li></ul>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树莓派之初见</title>
      <link href="/2016/05/02/raspberry-pi-first-try/"/>
      <url>/2016/05/02/raspberry-pi-first-try/</url>
      <content type="html"><![CDATA[<p>从公司搞来一台树莓派二代Model B，当下最新应该是第三代Model B。<br>还没想好怎么玩，先把系统装上，跑起来看看啥样。</p><a id="more"></a><h5 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h5><ul><li>A 900MHz quad-core ARM Cortex-A7 CPU</li><li>1GB RAM</li><li>4 USB ports</li><li>40 GPIO pins</li><li>Full HDMI port</li><li>Ethernet port</li><li>Combined 3.5mm audio jack and composite video</li><li>Camera interface (CSI)</li><li>Display interface (DSI)</li><li>Micro SD card slot</li><li>VideoCore IV 3D graphics core</li></ul><p>不花一分钱，把家里已经退役的那些“老家伙”们都请出来了，</p><ul><li>已退役的Sony安卓手机充电器</li><li>已退役的Moto安卓手机MicroSD卡8G,Class 2</li><li>已退役的TP-Link WN725N USB无线网卡</li><li>已退役的HP无线鼠标</li><li>已退役的键盘</li><li>Xbox的HDMI线</li></ul><p>按照RaspberryPi官方建议，下载并安装了Raspbian。这是其官方支持的操作系统，基于Debian。当然还支持其它操作系统，如Ubuntu、Win 10等。</p><p>详细的介绍、下载及安装指南，见：<br><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/</a></p><p>分享几张图，</p><p><img src="http://i.imgur.com/kIBOaiF.jpg" alt="http://i.imgur.com/kIBOaiF.jpg"></p><p><img src="http://i.imgur.com/KVK2Jw5.jpg" alt="http://i.imgur.com/KVK2Jw5.jpg"></p><p><img src="http://i.imgur.com/FdjESDU.jpg" alt="http://i.imgur.com/FdjESDU.jpg"></p><p><img src="http://i.imgur.com/0qnja1h.jpg" alt="http://i.imgur.com/0qnja1h.jpg"></p><p><img src="http://i.imgur.com/cPH1lvN.jpg" alt="http://i.imgur.com/cPH1lvN.jpg"></p>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
            <tag> Raspbian </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AWS免费套餐计划</title>
      <link href="/2016/02/24/aws-free-tier/"/>
      <url>/2016/02/24/aws-free-tier/</url>
      <content type="html"><![CDATA[<p>Amazon，云服务商中的业界良心，提供免费套餐计划。不同类型的主机，EC2、DB、各种专用服务器，对于个人而言，可以去搞一台来玩玩，用来部署程序，“上上网”什么的。反正不花钱，何乐而不为。</p><a id="more"></a><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Amazon Web Services (AWS) 免费套餐旨在为您提供实际动手使用 AWS 云服务的机会。AWS 免费套餐服务/产品包括自 AWS 注册之日起 12 个月内可供免费使用的服务，以及在 AWS 免费套餐的 12 个月期限到期后不自动过期的其他服务/产品。</p><p>在创建AWS账户后，您可以在一定的使用期限内免费使用AWS产品和服务。</p><h4 id="申请步骤"><a href="#申请步骤" class="headerlink" title="申请步骤"></a>申请步骤</h4><ol><li><a href="https://portal.aws.amazon.com/gp/aws/developer/registration/index.html" target="_blank" rel="noopener">注册AWS账户</a></li><li>输入您的账单地址和信用卡资料。仅在您的用量超出免费使用套餐限额后，才会向您收取费用。</li><li>选择产品即可开始使用 AWS 云服务。</li></ol><p>更多详细的产品介绍，直接去<a href="https://aws.amazon.com/cn/free/" target="_blank" rel="noopener">AWS免费套餐</a>主页看吧。</p>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> VPS </tag>
            
            <tag> Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>加入Visual Studio Dev Essentials计划</title>
      <link href="/2016/02/24/visual-studio-dev-essentials/"/>
      <url>/2016/02/24/visual-studio-dev-essentials/</url>
      <content type="html"><![CDATA[<p>技术高度社区化的今天，各个生态环境的主宰者们都想方设法盘活自己的阵营，给开发者带来很多福音。今天来看看微软给我们带来些什么礼物？</p><a id="more"></a><h4 id="Visual-Studio-Dev-Essentials"><a href="#Visual-Studio-Dev-Essentials" class="headerlink" title="Visual Studio Dev Essentials"></a>Visual Studio Dev Essentials</h4><p>从<a href="http://www.visualstudio.com" target="_blank" rel="noopener">Visual Studio官方主页</a>的显眼位置，可以看到这个计划的推广方案：</p><blockquote><p>Everything you need to build and deploy your app on any platform – for FREE.</p><p>获取您在任何平台上生成和部署应用所需的一切资源。 凭借先进的工具、云的强大功能、培训和支持，这是我们有史以来提供的最全面的免费开发者程序。</p></blockquote><p>我们直接点进去一窥究竟吧：</p><p><a href="https://www.visualstudio.com/zh-cn/product/visual-studio-dev-essentials-vs.aspx" title="点击查看" target="_blank" rel="noopener">https://www.visualstudio.com/zh-cn/product/visual-studio-dev-essentials-vs.aspx</a></p><h4 id="提供什么？"><a href="#提供什么？" class="headerlink" title="提供什么？"></a>提供什么？</h4><p><img src="http://i.imgur.com/ZnGSDxq.jpg" alt="Imgur"></p><h4 id="计划权益"><a href="#计划权益" class="headerlink" title="计划权益"></a>计划权益</h4><p><img src="http://i.imgur.com/KjG0xpO.jpg" alt="Imgur"></p><p><img src="http://i.imgur.com/MIYgQLH.jpg" alt="Imgur"></p><h4 id="得到了哪些权益？"><a href="#得到了哪些权益？" class="headerlink" title="得到了哪些权益？"></a>得到了哪些权益？</h4><p><img src="http://i.imgur.com/lG9ixBD.jpg" alt="Imgur"></p><h5 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h5><p><img src="http://i.imgur.com/aYhtvaq.jpg" alt="Imgur"></p><h5 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h5><p><img src="http://i.imgur.com/zkgeF5u.jpg" alt="Imgur"></p><h5 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h5><p><img src="http://i.imgur.com/4O0CSpG.jpg" alt="Imgur"></p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>还不错吧，从IDE到工具，再从平台到服务，还有免费的培训和支持，多么感人的计划。笔者赶紧取了Parallels Desktop/Access的免费订阅（三个月）来压压惊。另外还有一年的Azure免费计划。说到免费的云服务，还有一位业界良心，那就是AWS，下一篇文章单独来介绍他好了。</p>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WPF已死？-- No!</title>
      <link href="/2015/03/23/is-wpf-dead-no/"/>
      <url>/2015/03/23/is-wpf-dead-no/</url>
      <content type="html"><![CDATA[<blockquote><p>本文译自<a href="http://greglevenhagen.com/about-me/" title="Greg Levenhagen" target="_blank" rel="noopener">Greg Levenhagen</a>的一篇博客，原文地址<a href="http://greglevenhagen.com/is-wpf-dead-no/" title="Is WPF Dead? – NO!" target="_blank" rel="noopener">Is WPF Dead? – NO!</a></p></blockquote><a id="more"></a><p>Greg是微软客户端开发方面的MVP，也是Skyline公司的高级软件工程顾问。他经常被问到关于WPF的未来，WPF是否已死？让我们来看几条开发者表示担忧的理由：（没有特定顺序）</p><ul><li>微软推出基于Windows Modern UI（以前叫Metro UI）和WinRT的应用；</li><li>WPF官方团队在MSDN上的博客（<a href="http://blogs.msdn.com/b/wpf/" target="_blank" rel="noopener">http://blogs.msdn.com/b/wpf/</a>）停止更新已经超过3年；</li><li>StackOverflow上很多讨论：<a href="http://stackoverflow.com/questions/21035019/is-wpf-suitable-for-line-of-business-software" target="_blank" rel="noopener">http://stackoverflow.com/questions/21035019/is-wpf-suitable-for-line-of-business-software</a></li><li>Rocky Lhotka写了一篇博客：<a href="http://www.lhotka.net/weblog/WinRTAsTheNewSilverlightAndWPF.aspx" target="_blank" rel="noopener">http://www.lhotka.net/weblog/WinRTAsTheNewSilverlightAndWPF.aspx</a></li><li>Andrew Brust的博客论述：<a href="http://visualstudiomagazine.com/articles/2014/02/11/satya-nadellas-to-do-list.aspx" target="_blank" rel="noopener">http://visualstudiomagazine.com/articles/2014/02/11/satya-nadellas-to-do-list.aspx</a></li><li>除上述几条，一定还有不少关于WPF未来的担忧。</li></ul><p>几点说明WPF未死的理由：</p><ul><li>Greg刚刚参加了一个有微软参加的会议，他得到的信息是微软正在准备下一个版本的WPF。虽然不能透露更多的细节，但事实上微软仍在收集有关WPF的反馈和活动；</li><li>如果你想提交反馈，请戳<a href="https://dotnet.uservoice.com/forums/40583-wpf-feature-suggestions" target="_blank" rel="noopener">https://dotnet.uservoice.com/forums/40583-wpf-feature-suggestions</a></li><li>在去年的BUILD会议的讲台上，WPF得到了时间和一席之地，表明了微软的态度；</li><li>.NET 4.5推出了WPF的新特性。<a href="http://msdn.microsoft.com/en-us/library/bb613588%28v=vs.110%29.aspx" target="_blank" rel="noopener">http://msdn.microsoft.com/en-us/library/bb613588(v=vs.110).aspx</a></li></ul><!-- more --><p>对于还在犹豫是否应该使用WPF来构建业务支撑系统的企业而言，WPF其实是一种非常好的技术。我不能预测更宏观的问题，比如说未来客户端技术的发展方向。但我确切知道，WPF还没有死，她还在继续维护改进中。然而，移动领域仍然会持续增长。我看过不少Windows Store, Windows Phone, WPF, iOS, Andorid等平台的App案例，他们是如何创造商业价值，以及他们怎样与终端用户联系在一起。</p><p>Windows Store App可以用来构建业务支撑系统吗？当然可以。我自己也曾做过几个。我认为要想使用WRT做好业务系统，我们需要在设计思维方面作出一些改变。这也许意味着要把你的企业级应用拆解成一系列的应用。可以确信WPF更适合这样的场景，因为她拥有更强大的特征。但也不能仅仅是因为业务系统就放弃WinRT这套解决方案，任何应用程序我们都会去讨论她的商业价值，技术的决策应该是要去帮忙实现其价值。</p><p>很多开发者去学习Windows Store, WPF, Windows Phone or Silverlight等平台，这当然没问题。但我认为一个开发者更应该熟知XAML，而非特定的某一个平台。因为XAML是跨不同平台的公共语言，你的技能可以在这些平台之间自由切换。</p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>老杨的博客1.0发布</title>
      <link href="/2015/02/11/blog-complete/"/>
      <url>/2015/02/11/blog-complete/</url>
      <content type="html"><![CDATA[<p>至此，老杨的博客1.0版本发布了。实现了博客的基本功能：</p><ol><li>博客信息</li><li>博客流</li><li>时间线</li><li>标签系统</li><li>文章分类</li><li>文章归档</li><li>评论系统</li><li>文章搜索</li></ol><a id="more"></a><p><strong>博客技术介绍</strong></p><p>基于Jekyll + AmazeUI</p>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Amaze UI </tag>
            
            <tag> Jekyll </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>把博客前端换成了Amaze UI</title>
      <link href="/2015/02/02/change-blog-ui-to-amazeui/"/>
      <url>/2015/02/02/change-blog-ui-to-amazeui/</url>
      <content type="html"><![CDATA[<p>把博客的前端框架换成妹子UI（Amaze UI）了，原因有三：</p><ol><li>良好的本地化支持，完美支持中文字体。</li><li>良好的跨屏适配和兼容性，Amaze UI 以“移动优先(Mobile first)”为理念，从小屏逐步扩展到大屏，最终实现所有屏幕适配。而且针对移动平台做了性能和体积方面的优化，大幅度提升用户体验。</li><li>丰富的组件，包含近 20 个 CSS 组件、10 个 JS 组件，更有 17 款包含近 60 个主题的 Web 组件，可快速构建界面出色、体验优秀的跨屏页面。</li></ol><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/assets/css/amazeui.min.css"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>更多资料，请参考官方网站：</p><p><a href="http://amazeui.org" target="_blank" rel="noopener">amazeui.org</a></p><p><a href="http://meizi.io" target="_blank" rel="noopener">meizi.io</a></p>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Amaze UI </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
